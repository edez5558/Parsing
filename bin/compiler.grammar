#DICTIONARY
int: 0
float: 1
byte: 2
char: 3
bool: 4
string: 5
void: 6
object: 7
new: 8
delete: 9
if: 10
else: 11
while: 12
do: 13
for: 14
foreach: 15
main: 16
case: 17
switch: 18
include: 19
endif: 20
return: 21
elif: 22
func: 23
call: 24
null: 25
true: 26
false: 27
out: 28
in: 29
{: 131072
}: 131073
[: 131074
]: 131075
(: 131076
): 131077
,: 131078
.: 131079
end: 131080
=: 131081
+: 131082
-: 131083
*: 131084
/: 131085
!: 131086
<: 131087
>: 131088
doubledot: 131089
!=: 196608
==: 196609
>=: 196610
<=: 196611
+=: 196612
-=: 196613
*=: 196614
/=: 196615
&&: 196616
or: 196617
NUMBER: 65568
STRING: 65567
id: 262177

P   : 327680
LOWEXPRESION: 327681
LOWEXPRESION': 327682
LOWOP: 327683
MIDEXPRESION: 327684
MIDEXPRESION': 327685
MIDOP: 327686
CONSTANT: 327687
EXPRESION: 327688
LOGICEXPRESION: 327689
LOGICEXPRESION': 327690
LOGICOP: 327691
COMPEXPRESION: 327692
COMPEXPRESION': 327693
COMPOP: 327694

TYPE: 327695
ID: 327696
ASSIGN: 327697
ASSIGNOP: 327698

ASSIGNSTMT: 327699

WHILESTMT:  327700
INST: 327701
INSTLIST: 327702

BLOCKSTMT: 327703
IFSTMT: 327704
ELSE: 327705
FORSTMT: 327706
DOWHILESTMT: 327707
VARDEC: 327708

PARMS: 327709
PARMSDEC: 327710
PARMSLIST: 327711
PARMSLIST': 327712
FUNCDEC: 327713
PARMSID: 327714

CALL: 327715
ARGS: 327716
ARGSLIST: 327717
ARGSLIST': 327718
CALLSTMT: 327719

ELIF: 327720
ELIFLIST: 327721
ELIFLIST': 327722

FUNCID: 327723

RETURNSTMT: 327724

#TERMINAL
int float byte char bool string void object new delete if else while do for foreach main case switch include null true false out in 
{ } [ ] ( ) , . end = + - * / ! < > != == >= <= += -= *= /= && or NUMBER STRING id return
endif elif doubledot func call
#NOTERMINAL
P
EXPRESION LOWEXPRESION LOWEXPRESION' MIDEXPRESION MIDEXPRESION' LOGICEXPRESION LOGICEXPRESION' COMPEXPRESION COMPEXPRESION' LOGICOP COMPOP LOWOP MIDOP ASSIGNOP CONSTANT ID TYPE

ASSIGNSTMT WHILESTMT BLOCKSTMT IFSTMT FORSTMT DOWHILESTMT CALLSTMT RETURNSTMT

FUNCID

PARMS PARMSDEC PARMSLIST PARMSID FUNCDEC PARMSLIST'
ELIF ELIFLIST ELIFLIST'

CALL ARGS ARGSLIST ARGSLIST' 

ELSE

VARDEC

ASSIGN INST INSTLIST 

#INITIAL P

#RULE
P: INSTLIST;

INSTLIST: INST INSTLIST | ~;

INST: ASSIGNSTMT | WHILESTMT | BLOCKSTMT | IFSTMT | FORSTMT | DOWHILESTMT |
      VARDEC | CALLSTMT | FUNCDEC | RETURNSTMT;

RETURNSTMT: return EXPRESION end;

VARDEC: TYPE doubledot ID end;
FUNCDEC: func TYPE doubledot FUNCID ( PARMS ) INST;
FUNCID: id | main;

PARMS: PARMSLIST |~;
PARMSLIST: PARMSDEC PARMSLIST';
PARMSLIST': , PARMSDEC | ~;
PARMSDEC: TYPE doubledot PARMSID;
PARMSID: id | [ ] id;

BLOCKSTMT: { INSTLIST };
CALLSTMT: CALL end;

FORSTMT: for ( ASSIGNSTMT EXPRESION end ASSIGN ) INST;

WHILESTMT: while ( EXPRESION ) INST;
DOWHILESTMT: do INST while ( EXPRESION ) end; 

IFSTMT: if ( EXPRESION ) INST ELIF endif;
ELIF: ELIFLIST | ~;
ELIFLIST: ELSE ELIFLIST';
ELIFLIST': elif ( EXPRESION ) INST ELSE ELIFLIST' | ~;
ELSE: else INST | ~;

ASSIGNSTMT: ASSIGN end | end;

ASSIGN: ID ASSIGNOP EXPRESION;

CALL: call id ( ARGS );
ARGS: ARGSLIST | ~;
ARGSLIST: EXPRESION ARGSLIST';
ARGSLIST': , EXPRESION ARGSLIST' | ~;

EXPRESION: LOGICEXPRESION;

LOGICEXPRESION: COMPEXPRESION LOGICEXPRESION';
LOGICEXPRESION': LOGICOP COMPEXPRESION LOGICEXPRESION' | ~;

COMPEXPRESION: LOWEXPRESION COMPEXPRESION';
COMPEXPRESION': COMPOP LOWEXPRESION COMPEXPRESION' | ~;

LOWEXPRESION: MIDEXPRESION LOWEXPRESION';
LOWEXPRESION': LOWOP MIDEXPRESION LOWEXPRESION' | ~;

MIDEXPRESION: CONSTANT MIDEXPRESION';
MIDEXPRESION': MIDOP CONSTANT MIDEXPRESION' | ~;

LOWOP: + | -;
MIDOP: * | /;
LOGICOP: && | or;
COMPOP: == | < | > | <= | >= | !=;
ASSIGNOP: = | += | -= | *= | /= ;

TYPE: int | bool | string | char | object | void | float;

ID: id | [ EXPRESION ] id;

CONSTANT: STRING | NUMBER | true | false | ID | ( EXPRESION ) | CALL;
